# Use the official Python 3.11 image based on Alpine Linux
FROM python:3.11-alpine

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV APP_HOME /app

# Install required packages
RUN apk update && \
    apk add --no-cache gcc musl-dev postgresql-dev libffi-dev zlib-dev jpeg-dev nginx openssl

# Create the app directory and set it as the working directory
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# Copy the requirements file and install the requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Django app files
COPY .. .

# Set up nginx configuration
COPY ../nginx.conf /etc/nginx/nginx.conf

# Generate a self-signed SSL certificate for local development and testing
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -subj "/C=US/ST=Example/L=Example/O=Example/OU=Example/CN=example.com" \
    -keyout /etc/ssl/private/nginx-selfsigned.key \
    -out /etc/ssl/certs/nginx-selfsigned.crt

# Set permissions for OpenShift
RUN chown -R 1001:0 $APP_HOME && \
    chmod -R g+rwX $APP_HOME && \
    chmod g+w /etc/nginx/nginx.conf && \
    chown -R 1001:0 /var/lib/nginx && \
    chmod -R g+rwX /var/lib/nginx && \
    chown -R 1001:0 /var/log/nginx && \
    chmod -R g+rwX /var/log/nginx && \
    chown -R 1001:0 /etc/ssl && \
    chmod -R g+rwX /etc/ssl

# Switch to non-root user
USER 1001

# Expose the ports for nginx
EXPOSE 8080 8443

# Start gunicorn and nginx
CMD ["sh", "-c", "gunicorn my_django_app.wsgi:application --bind 0.0.0.0:8000 --workers 3 & nginx -g 'daemon off;'"]
