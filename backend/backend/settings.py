"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
http://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
http://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

import saml2 as saml2
from django.urls import reverse_lazy

from saml2 import BINDING_HTTP_POST, BINDING_HTTP_REDIRECT
from saml2.saml import NAMEID_FORMAT_UNSPECIFIED

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See http://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', None)
if not SECRET_KEY:
    raise ValueError("Cannot find SECRET_KEY environment variable!")
else:
    # making sure the secret_key is retrieved from the env variable as a string
    SECRET_KEY = str(SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DJANGO_DEBUG', 1))

# ALLOWED_HOSTS = [os.environ.get('DJANGO_ALLOWED_HOSTS', ['localhost'])]
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jobsearch',
    'corsheaders',
    'rest_framework',
    'djangosaml2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'jobsearch.custom_error_middleware.CustomErrorMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "static"],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# http://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jobhawk_db',
        'USER': 'ofekbu',
        'PASSWORD': 'Fuckoff101',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# http://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# http://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# http://docs.djangoproject.com/en/4.1/howto/static-files/

# Default primary key field type
# http://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Enable http and set a secure cookie flag
# SESSION_COOKIE_HTTPONLY = bool(os.environ.get('DJANGO_SESSION_COOKIE_HTTPONLY', False))
# SECURE_SSL_REDIRECT = bool(os.environ.get('DJANGO_SECURE_SSL_REDIRECT', False))
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_HTTPONLY = False

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Enable XSS protection for supported browsers
SECURE_BROWSER_XSS_FILTER = True

# Enable content type sniffing protection for supported browsers
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enable HSTS headers to force http on future requests
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# SAML
SAML_BASE_DIR = os.path.abspath(os.path.dirname(__file__))
LOGIN_REDIRECT_URL = 'http://localhost:3000/saml-redirect'
LOGIN_URL = '/saml2/login/'
LOGOUT_URL = '/saml2/logout/'

AUTHENTICATION_BACKENDS = [
    'jobsearch.backends.SAMLAuthenticationBackend',
]

SAML_CONFIG = {
    'xmlsec_binary': '/usr/bin/xmlsec1',  # Path to the xmlsec1 binary
    'entityid': 'http://localhost:8000/metadata',  # Replace with your Django app's domain
    'attribute_map_dir': os.path.join(os.path.dirname(saml2.__file__), 'attributemaps'),
    'nameid_format': 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified',
    'idp': {
        'http://adfs.example.com/metadata': {  # Replace with your ADFS metadata URL
            'metadata': {
                'local': [os.path.join(BASE_DIR, 'metadata.xml')],  # Update the path to your local metadata file
            },
            'single_sign_on_service': {
                'binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
                'location': 'http://adfs.example.com/SSO',  # Replace with your ADFS SSO URL
            },
            'single_logout_service': {
                'binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
                'location': 'http://adfs.example.com/Logout',  # Replace with your ADFS logout URL
            },
            'x509cert': 'CERTIFICATE_DATA_HERE',  # Replace with your ADFS public certificate data
        },
    },
}

SAML_AUTH = {
    'strict': True,
    'debug': False,
    'entity_id': 'http://localhost:8000/metadata',
    'nameid_format': NAMEID_FORMAT_UNSPECIFIED,
    'service': {
        'sp': {
            'name': 'Django SAML Service Provider',
            'endpoints': {
                'assertion_consumer_service': [
                    ('http://localhost:8000/acs/', BINDING_HTTP_POST),
                ],
                'single_logout_service': [
                    ('http://localhost:8000/ls/', BINDING_HTTP_REDIRECT),
                    ('http://localhost:8000/ls/post/', BINDING_HTTP_POST),
                ],
            },
            'required_attributes': ['uid'],
            'optional_attributes': ['email', 'first_name', 'last_name'],
        },
    },
    'security': {
        'authn_requests_signed': False,
        'logout_requests_signed': True,
        'logout_responses_signed': True,
        'want_assertions_signed': True,
        'want_response_signed': False,
    },
    'metadata': {
        'local': [os.path.join(SAML_BASE_DIR, 'metadata.xml')],
    },
}

# Corsheaders
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]
